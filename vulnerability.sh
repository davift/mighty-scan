##
## Vulnerability Phase
##

box_green "Attack Surface by Type"
mkdir -p $OUTPUT_DIR/vulnscan

# LINUX
LINUX="$OUTPUT_DIR/vulnscan/linux.ips"
echo -n '' > $LINUX
for HOST in $(egrep -v "^#|Status: Up" $OUTPUT_DIR/port.open | cut -d' ' -f2); do
  CHECK=$(egrep -v "^#|Status: Up" $OUTPUT_DIR/fingerprint/$HOST.nmap | grep 'OS: Linux')
  if [ "$CHECK" != "" ]; then
    echo $HOST >> $LINUX
  fi
done
COUNT=$(cat $LINUX | wc -l)
echo "--Linux-($COUNT)--"
tput setaf 4
cat $LINUX
tput sgr0

# WINDOWS
WINDOWS="$OUTPUT_DIR/vulnscan/windows.ips"
echo -n '' > $WINDOWS
for HOST in $(egrep -v "^#|Status: Up" $OUTPUT_DIR/port.open | cut -d' ' -f2); do
  CHECK=$(egrep -v "^#|Status: Up" $OUTPUT_DIR/fingerprint/$HOST.nmap | grep 'OS: Windows')
  if [ "$CHECK" != "" ]; then
    echo $HOST >> $WINDOWS
  fi
done
COUNT=$(cat $LINUX | wc -l)
echo "--Windows-($COUNT)--"
tput setaf 4
cat $WINDOWS
tput sgr0

  # APPLE - NOT IN USE
  # APPLE="$OUTPUT_DIR/vulnscan/apple.ips"
  # echo -n '' > $APPLE
  # for HOST in $(egrep -v "^#|Status: Up" $OUTPUT_DIR/port.open | cut -d' ' -f2); do
  #   CHECK=$(egrep -v "^#|Status: Up" $OUTPUT_DIR/fingerprint/$HOST.nmap | grep 'OS: Apple')
  #   if [ "$CHECK" != "" ]; then
  #     echo $HOST >> $APPLE
  #   fi
  # done
  # COUNT=$(cat $APPLE | wc -l)
  # echo "--Apple-($COUNT)--"
  # tput setaf 4
  # cat $APPLE
  # tput sgr0

# SSH
SSH="$OUTPUT_DIR/vulnscan/ssh.ips"
egrep -v "^#|Status: Up" $OUTPUT_DIR/port.open | grep ' 22/' | cut -d' ' -f2 > $SSH
COUNT=$(cat $SSH | wc -l)
echo "--SSH-($COUNT)--"
tput setaf 4
cat $SSH
tput sgr0

# SMB/CIFS
SMB="$OUTPUT_DIR/vulnscan/smb.ips"
egrep -v "^#|Status: Up" $OUTPUT_DIR/port.open | grep ' 139\|445/' | cut -d' ' -f2 > $SMB
COUNT=$(cat $SMB | wc -l)
echo "--SMB-($COUNT)--"
tput setaf 4
cat $SMB
tput sgr0

# NFS
NFS="$OUTPUT_DIR/vulnscan/nfs.ips"
egrep -v "^#|Status: Up" $OUTPUT_DIR/port.open | grep ' 111\|2049/' | cut -d' ' -f2 > $NFS
COUNT=$(cat $NFS | wc -l)
echo "--NFS-($COUNT)--"
tput setaf 4
cat $NFS
tput sgr0

# HTTP
HTTP="$OUTPUT_DIR/vulnscan/http.ips"
egrep -v "^#|Status: Up" $OUTPUT_DIR/port.open | grep ' 80\|443/' | cut -d' ' -f2 > $HTTP
COUNT=$(cat $HTTP | wc -l)
echo "--HTTP-($COUNT)--"
tput setaf 4
cat $HTTP
tput sgr0

# FTP
FTP="$OUTPUT_DIR/vulnscan/ftp.ips"
egrep -v "^#|Status: Up" $OUTPUT_DIR/port.open | grep ' 20\|21/' | cut -d' ' -f2 > $FTP
COUNT=$(cat $FTP | wc -l)
echo "--FTP-($COUNT)--"
tput setaf 4
cat $FTP
tput sgr0

# Scan options
read -e -p "Vuln Scripts: Linux (y/N): " OPT1
read -e -p "Vuln Scripts: Windows (y/N): " OPT2
read -e -p "Vuln Scripts: SSH (y/N): " OPT3
read -e -p "Vuln Scripts: SMB (y/N): " OPT4
read -e -p "Vuln Scripts: NFS (y/N): " OPT5
read -e -p "Vuln Scripts: HTTP (y/N): " OPT6
read -e -p "Vuln Scripts: FTP (y/N): " OPT7

#
# Performing Vuln Scan
#

function nmap_script_scan() {
  NAME=$1
  SCRIPTS=$2
  PORT_LIST=$3
  VICTIMS=$4
  if [ $USER != 'root' ]; then
    nmap -oG $OUTPUT_DIR/vulnscan/$NAME.grep -oN $OUTPUT_DIR/vulnscan/$NAME.nmap -Pn $SILENT --script $SCRIPTS -vv -p $PORT_LIST -iL $VICTIMS
  else
    # In case certain funcionalities require access to raw packets (currently not in use)
    nmap -oG $OUTPUT_DIR/vulnscan/$NAME.grep -oN $OUTPUT_DIR/vulnscan/$NAME.nmap -Pn $SILENT --script $SCRIPTS -vv -p $PORT_LIST -iL $VICTIMS
  fi
}

# Linux
if [ "$OPT1" == "y" ] || [ "$OPT1" == "Y" ]; then
  box_green "Vuln Scan for Windows"
  nmap_script_scan "linux" "samba-vuln-cve-2012-1182" "139" "$LINUX"
    # Checks for SAMBA RCE Vuln.
fi

# Windows
if [ "$OPT2" == "y" ] || [ "$OPT2" == "Y" ]; then
  box_green "Vuln Scan for Linux"
  nmap_script_scan "windows" "rdp-enum-encryption,rpcinfo" "3389" "$WINDOWS"
    # RPC: Encryption Enumeration
    # Information Disclosure: NetBIOS, DNS, and OS Build Version.

  # A more agressive approach would be:
  #nmap_script_scan "windows" "rdp-enum-encryption,rpcinfo,rpc-grind,rdp-vuln-ms12-020" "3389" "$WINDOWS"
fi

# SSH
if [ "$OPT3" == "y" ] || [ "$OPT3" == "Y" ]; then
  box_green "Vuln Scan for SSH"
  nmap_script_scan "ssh" "ssh2-enum-algos,sshv1" "22" "$SSH"
    # Reports Encryption aand Compression Algorithms.

  # A more agressive approach would be:
  # nmap_script_scan "ssh" "ssh2-enum-algos,ssh-publickey-acceptance,sshv1,rsa-vuln-roca" "22" "$SSH"
fi

# SMB/CIFS
if [ "$OPT4" == "y" ] || [ "$OPT4" == "Y" ]; then
  box_green "Vuln Scan for SMB/CIFS"
  nmap_script_scan "smb" "smb-os-discovery,smb-enum-shares,smb-enum-users,msrpc-enum" "135-139,445" "$SMB"
    # Names: Computer, Domain, Forest, NetBIOS (Computer and Domain), Workgroup, and FQDN.
    # More: System Time, Publically Exposed Shares, Enumerate all Users and Mapped Services.

  # A more agressive approach would be:
  # nmap_script_scan "smb" "smb-os-discovery,smb-enum*,smb-ls,smb-mbenum,smb-protocols,smb-s*,smb-vuln*,msrpc-enum,nbstat,nbns-interfaces,smb2-vuln-uptime" "135-139,445" "$SMB"
fi

# NFS
if [ "$OPT5" == "y" ] || [ "$OPT5" == "Y" ]; then
  box_green "Vuln Scan for NFS"
  nmap_script_scan "nfs" "nfs-ls,nfs-statfs" "111,2049" "$NFS"
    # Remote NFS Export: Enumerates, Mounts, Gets ACLs, and Lists Files with Attributes.
    # More: Lists Mounting Points and Shows Disk Utilization Statistics.
fi

# HTTP
if [ "$OPT6" == "y" ] || [ "$OPT6" == "Y" ]; then
  box_green "Vuln Scan for HTTP"
  nmap_script_scan "http" "http-enum,http-errors,http-auth-finder,http-git,http-methods,http-robots.txt,http-svn-info,http-vhosts" "80,443" "$HTTP"
    # Enumerates Directories Used By Popular Apps and Crawls for Error Pages.

  # A more agressive approach would be:
  # nmap_script_scan "http" "http-enum,http-errors,http-auth-finder,http-git,http-methods,http-robots.txt,http-svn-info,http-vhosts,http-auth,http-default-accounts,http-passwd,http-php-version,http-security-headers,http-sitemap-generator,http-svn-enum,http-waf-detect,http-waf-fingerprint,http-webdav-scan" "80,443" "$HTTP"
fi

# FTP
if [ "$OPT7" == "y" ] || [ "$OPT7" == "Y" ]; then
  box_green "Vuln Scan for FTP"
  nmap_script_scan "ftp" "ftp-anon" "20,21" "$FTP"
    # Tries to Connect as Anonymous.

  # A more agressive approach would be:
  # nmap_script_scan "ftp" "ftp-anon,ftp-brute" "20,21" "$FTP"
fi

# MySQL (pending)

# SMTP (pending)

# IMAP (pending)
